/*
 * Analog clock. (C) 2022 @Nutul (albertonarduzzi@gmail.com)
 *
 * This Program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This Program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

 .analogclock {
    --faceRadius: 40vh;
    --faceWidth: calc(var(--faceRadius) * 2);
    --faceHeight: calc(var(--faceRadius) * 2);
    --hand_hour: calc(var(--faceRadius) - 15vh);
    --hand_minute: calc(var(--faceRadius) - 3vh);
    --hand_sec_balance: 4vh;
    --hand_second: calc(var(--faceRadius) + var(--hand_sec_balance) - 2vh);
    --hand_color: #eee;

    width: var(--faceWidth);
    height: var(--faceHeight);
    left: 50%;
    transform: translateX(-50%);
    background-color: inherit;
    cursor: pointer;
    position: relative;
}

.analogclock_face {
    width: 100%;
    height: 100%;
    border-radius: 50%;
}

.analogclock_hand {
    left: calc(50% - 5px);
    bottom: calc(50% - 10px);
    width: 9px;
    position: absolute;
    border: 1px solid var(--hand_color);
    background-color: var(--hand_color);
}

.analogclock_hh {
    height: var(--hand_hour);
    transform-origin: center calc(var(--hand_hour) - 10px);
    border-top-left-radius: 7px;
    border-top-right-radius: 7px;
}

.analogclock_mm {
    height: var(--hand_minute);
    transform-origin: center calc(var(--hand_minute) - 10px);
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
}

.analogclock_hh::after,
.analogclock_mm::after {
    content: " ";
    position: absolute;
    /* top: 100%; */
    border-radius: 5px;
    background-color: var(--accentxts);
    transform: translate(-50%, 0.2vh);
    width: 0.5vh;
    height: 10vh;
}

.analogclock_ss {
    left: calc(50% - 1px);
    bottom: calc(50% - var(--hand_sec_balance));
    width: 0px;
    height: var(--hand_second);
    transform-origin: center calc(var(--hand_second) - var(--hand_sec_balance));
    border-color: var(--accentxts);
    background-color: var(--accentxts);
}

.analogclock_ss::before,
.analogclock_ss::after {
    position: absolute;
    top: 100%;
    border-radius: 50%;
    border: inherit;
    color: var(--accentxts);
}

.analogclock_ss::before {
    content: " ";
    width: 3vh;
    height: 1.5vh;
    transform: translateX(-50%);
    border-width: 4px 0 0 0;
    font-size: 1.8vh;
    background-color: transparent;
}

.analogclock_ss::after {
    content: "";
    width: 2.5vh;
    height: 2.5vh;
    border-width: 4px;
    transform: translate(-50%, calc(-50% - var(--hand_sec_balance)));
    background-color: inherit;
}

.analogclock_ss_tip {
    width: 2vh;
    height: 2vh;
    left: 50%;
    top: 0;
    background-color: inherit;
    transform: translate(-50%, 4vh) rotate(45deg);
    position: absolute;
    border: inherit;
    border-radius: 50%;
}

.analogclock_tick {
    border: 1px solid var(--hand_color);
    transform-origin: center top;
    position: absolute;
    background-color: var(--hand_color);
}

.analogclock_mtick {
    height: 0px;
    width: 0px;
}

.analogclock_htick {
    height: 3px;
    width: 3px;
}
